---
  - name: Configure kerberos client settings
    become: True
    template:
      src: krb5.conf.j2
      dest: /etc/krb5.conf
      owner: root
      group: root
      mode: 0644
    notify: restart kdc

  - name: Store kerberos LDAP credentials
    become: True
    expect:
      command: "kdb5_ldap_util stashsrvpw -f /etc/krb5kdc/ldap.cred cn=krbbind,{{ auth_ldap_domain_ldap }}"
      creates: /etc/krb5kdc/ldap.cred
      responses:
        (cn\=krbbind): "{{ auth_kerberos_ldap_password }}"

  - name: Fix kerberos LDAP credentials permissions
    become: True
    file:
      path: /etc/krb5kdc/ldap.cred
      owner: root
      group: root
      mode: 0640

  - name: Configure KDC
    become: True
    template:
      src: kdc.conf.j2
      dest: /etc/krb5kdc/kdc.conf
      owner: root
      group: root
      mode: 0640
    notify: restart kdc

  - name: Figure out whether realm has been created yet
    shell: |
      ldapsearch -Z -x -D "cn=Directory Manager" -w '{{ auth_ldap_admin_pwd_clear }}' -b "{{ auth_ldap_domain_ldap }}" cn=Kerberos | grep "dn: cn" | grep Kerberos
    register: krbrealmcheck
    failed_when: False
    changed_when: False

  - name: Create Kerberos realm
    run_once: true
    when: krbrealmcheck.rc == 1
    expect:
      command: kdb5_ldap_util -D "cn=Directory Manager" create -subtrees "ou=Users,{{ auth_ldap_domain_ldap }}" -r "{{ auth_ldap_domain|upper }}" -s
      responses:
        (cn\=Directory\ Manager): "{{ auth_ldap_admin_pwd_clear }}"
        (database master key): "{{ auth_kerberos_database_master_key }}"

  - name: Configure LDAP ACLs (Kerberos)
    ldap_attr:
      dn: "{{ item.target }}"
      bind_dn: "cn=Directory Manager"
      bind_pw: '{{ auth_ldap_admin_pwd_clear }}'
      server_uri: "{{ auth_ldap_ansible_url }}"
      values: "{{ item.acls }}"
      name: aci
      state: exact
    when: item.target == "cn=Kerberos,{{ auth_ldap_domain_ldap }}"
    with_items: "{{ auth_ldap_permissions }}"

  - name: Fetch master database secret to control node
    when: krbrealmcheck.rc == 1
    become: True
    fetch:
      src: "/etc/krb5kdc/.k5.{{ auth_ldap_domain|upper }}"
      dest: "fetch/krb5secret"
      flat: yes
      validate_checksum: yes
      fail_on_missing: no
    failed_when: False

  - name: Upload master database secret to kerberos nodes
    when: krbrealmcheck.rc == 1
    become: True
    copy:
      src: "fetch/krb5secret"
      dest: "/etc/krb5kdc/.k5.{{ auth_ldap_domain|upper }}"
      owner: root
      group: root
      mode: 0600
    notify: restart kdc

  - meta: flush_handlers

  - name: Create default ticket policy
    when: krbrealmcheck.rc == 1
    run_once: True
    command: kadmin.local addpol -minlength 8 -minclasses 3 -maxfailure 3 -failurecountinterval "60 sec" -lockoutduration "600 sec" default

  - name: Create anonymous prinicpal for PKINIT/FAST
    when: krbrealmcheck.rc == 1
    run_once: True
    command: kadmin.local -q 'addprinc -randkey WELLKNOWN/ANONYMOUS'

  - name: Create principals for 389ds
    become: True
    run_once: True
    command: kadmin.local addprinc -randkey "ldap/{{ hostvars[item]['ansible_fqdn'] }}@{{ auth_ldap_domain|upper }}"
    failed_when: False
    changed_when: False
    with_items: "{{ groups['core'] }}"

  - name: Create keytabs for 389ds
    become: True
    when: item == inventory_hostname
    command: kadmin.local ktadd -k /etc/dirsrv/ds.keytab "ldap/{{ hostvars[item]['ansible_fqdn'] }}@{{ auth_ldap_domain|upper }}"
    args:
      creates: /etc/dirsrv/ds.keytab
    with_items: "{{ groups['core'] }}"
    notify: restart dirsrv

  - name: Allow 389ds to access it's keytab
    become: True
    file:
      path: /etc/dirsrv/ds.keytab
      owner: dirsrv
      group: root
      mode: 0640

  - name: Create host principals
    become: True
    run_once: True
    command: kadmin.local addprinc -randkey "host/{{ hostvars[item]['ansible_fqdn'] }}@NJSM.DE"
    failed_when: False
    changed_when: False
    with_items: "{{ groups['core'] }}"

  - name: Create host keytabs
    become: True
    when: item == inventory_hostname
    command: kadmin.local ktadd "host/{{ hostvars[item]['ansible_fqdn'] }}@NJSM.DE"
    args:
      creates: /etc/krb5.keytab
    with_items: "{{ groups['core'] }}"

  - name: Reconfigure 389ds to support GSSAPI
    become: True
    template:
      src: dirsrv.j2
      dest: /etc/default/dirsrv
      owner: root
      group: root
      mode: 0644
    notify: restart dirsrv

  #  - name: Remove default SASL mapping entries
  #    ldap_entry:
  #      dn: "cn={{ item }},cn=mapping,cn=sasl,cn=config"
  #      server_uri: "{{ auth_ldap_ansible_url }}"
  #      bind_dn: "cn=Directory Manager"
  #      bind_pw: "{{ auth_ldap_admin_pwd_clear }}"
  #      state: absent
  #    with_items:
  #      - Kerberos uid mapping
  #      - rfc 2829 dn syntax
  #      - rfc 2829 u syntax
  #      - uid mapping
  #
  #  # Quote: "There is no way to specify the order that mappings are processed.
  #  # However, there is a way to control how SASL mappings are processed: the
  #  # name. The Directory Server processes SASL mappings in reverse ASCII order."
  #  - name: Add normal people SASL UID mapping
  #    ldap_entry:
  #      dn: "cn=Y_User Map,cn=mapping,cn=sasl,cn=config"
  #      server_uri: "{{ auth_ldap_ansible_url }}"
  #      bind_dn: "cn=Directory Manager"
  #      bind_pw: "{{ auth_ldap_admin_pwd_clear }}"
  #      state: present
  #      objectClass:
  #        - top
  #        - nsSaslMapping
  #      attributes:
  #        cn: Y_User Map
  #        nsSaslMapRegexString: \(.*\)@{{ auth_ldap_domain|upper }}
  #        nsSaslMapBaseDNTemplate: "ou=Users,{{ auth_ldap_domain_ldap }}"
  #        nsSaslMapFilterTemplate: (uid=\1)
  #
  #  - name: Add service account SASL UID mapping
  #    ldap_entry:
  #      dn: "cn=Z_Service Map,cn=mapping,cn=sasl,cn=config"
  #      server_uri: "{{ auth_ldap_ansible_url }}"
  #      bind_dn: "cn=Directory Manager"
  #      bind_pw: "{{ auth_ldap_admin_pwd_clear }}"
  #      state: present
  #      objectClass:
  #        - top
  #        - nsSaslMapping
  #      attributes:
  #        cn: Z_Service Map
  #        nsSaslMapRegexString: \(.*\)/\(.*\)@{{ auth_ldap_domain|upper }}
  #        nsSaslMapBaseDNTemplate: "cn={{ auth_ldap_domain|upper }},cn=Kerberos,{{ auth_ldap_domain_ldap }}"
  #        nsSaslMapFilterTemplate: (krbPrincipalName=\1/\2@{{ auth_ldap_domain|upper }})

  - name: Add PAM passthrough auth for normal users
    ldap_attr:
      dn: "cn=PAM Pass Through Auth,cn=plugins,cn=config"
      server_uri: "{{ auth_ldap_ansible_url }}"
      bind_dn: "cn=Directory Manager"
      bind_pw: "{{ auth_ldap_admin_pwd_clear }}"
      state: exact
      name: "{{ item.key }}"
      values: "{{ item.values }}"
    with_dict:
      cn: PAM Pass Through Auth
      nsslapd-pluginenabled: on
      nsslapd-pluginLoadGlobal: true
      pamMissingSuffix: ALLOW
      pamExcludeSuffix: cn=config
      pamIncludeSuffix: "ou=Users,{{ auth_ldap_domain_ldap }}"
      pamIDMapMethod: RDN ou=Users,dc=njsm,dc=de
      pamFallback: 'FALSE'
      pamSecure: 'TRUE'
      pamService: ldapkrb
    notify: restart dirsrv

  - name: Configure ldapkrb pam service
    become: True
    template:
      src: ldapkrb.j2
      dest: /etc/pam.d/ldapkrb
      owner: root
      group: root
      mode: 0644

  # If we changed the config, restart the server as we might need GSSAPI...
  - meta: flush_handlers
